let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <Del> =delimitMate#Del()
inoremap <buffer> <Down> =delimitMate#Finish()<Down>
inoremap <buffer> <Up> =delimitMate#Finish()<Up>
inoremap <buffer> <Right> =delimitMate#Finish()<Right>
inoremap <buffer> <Left> =delimitMate#Finish()<Left>
inoremap <buffer> <RightMouse> =delimitMate#Finish()<RightMouse>
inoremap <buffer> <LeftMouse> =delimitMate#Finish()<LeftMouse>
inoremap <buffer> <expr> <S-Tab> delimitMate#ShouldJump() ? "\=delimitMate#JumpAny()\" : "\<S-Tab>"
inoremap <buffer> <expr> <S-BS> delimitMate#WithinEmptyPair() ? "\<Del>" : "\<S-BS>"
inoremap <buffer> <BS> =delimitMate#BS()
vnoremap <buffer> <expr> ,` delimitMate#Visual("`")
vnoremap <buffer> <expr> ,' delimitMate#Visual("'")
vnoremap <buffer> <expr> ," delimitMate#Visual("\"")
vnoremap <buffer> <expr> ,[ delimitMate#Visual("[")
vnoremap <buffer> <expr> ,{ delimitMate#Visual("{")
vnoremap <buffer> <expr> ,( delimitMate#Visual("(")
vnoremap <buffer> <expr> ,] delimitMate#Visual("]")
vnoremap <buffer> <expr> ,} delimitMate#Visual("}")
vnoremap <buffer> <expr> ,) delimitMate#Visual("\)")
inoremap <buffer>  =delimitMate#Finish()
inoremap <buffer> " =delimitMate#QuoteDelim("\"")
inoremap <buffer> ' =delimitMate#QuoteDelim("\'")
inoremap <buffer> ( (=delimitMate#JumpIn(")")
inoremap <buffer> ) =delimitMate#JumpOut("\)")
inoremap <buffer> [ [=delimitMate#JumpIn("]")
inoremap <buffer> ] =delimitMate#JumpOut("\]")
inoremap <buffer> ` =delimitMate#QuoteDelim("\`")
inoremap <buffer> { {=delimitMate#JumpIn("}")
inoremap <buffer> } =delimitMate#JumpOut("\}")
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal nobuflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'nerdtree'
setlocal filetype=nerdtree
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal list
setlocal nomacmeta
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'nerdtree'
setlocal syntax=nerdtree
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal winfixwidth
setlocal nowrap
setlocal wrapmargin=0
let s:l = 4 - ((3 * winheight(0) + 28) / 57)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
4
normal! 0
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
